#!groovy

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Divorce Case Maintenance Service',
        projectUrlStr: 'https://github.com/hmcts/div-case-maintenance-service'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "div"
def component = "cms"

def channel = '#div-dev'

def secrets = [
    'div-${env}': [
        secret("ccd-submission-s2s-auth-secret", "AUTH_PROVIDER_CCDSUBMISSION_CLIENT_KEY"),
        secret("idam-secret", "AUTH_IDAM_CLIENT_SECRET"),
        secret("ccd-submission-s2s-auth-secret", "AUTH_PROVIDER_SERVICE_CLIENT_KEY"),
        secret("idam-secret", "AUTH2_CLIENT_SECRET"),
        secret("draft-store-api-encryption-key", "DRAFT_STORE_API_ENCRYPTION_KEY_VALUE")
    ],
    's2s-${env}'      : [
        secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
        secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
        secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
        secret('microservicekey-ccd-admin', 'CCD_ADMIN_S2S_KEY'),
        secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY')
    ],
    'ccd-${env}'      : [
        secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
        secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET')

    ]
]


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type , product, component) {

    if (env.CHANGE_TITLE && !env.CHANGE_TITLE.startsWith('[PREVIEW]')) {
        enableDockerBuild()
        installCharts()
    }

    loadVaultSecrets(secrets)
//    setVaultName('div')

    after('checkout') {
        echo '${product}-${component} checked out'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    // Kubernetes does not retrieve variables from the output terraform
    before('functionalTest:preview') {
        env.test_environment = 'aat'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    enableSlackNotifications(channel)
}
