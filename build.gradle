import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.7.18'
        springCloudBomVersion = "2021.0.8"
    }
    repositories {
        mavenCentral()
        maven { url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.5.7")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.49.0'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.4.2'
    id 'org.sonarqube' version '6.2.0.5505'
    id 'org.springframework.boot' version '2.7.18'
    id 'au.com.dius.pact' version '4.2.3'
    id 'uk.gov.hmcts.java' version '0.12.65'
}

apply plugin: 'checkstyle'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

bootJar {
    archiveFileName = 'div-case-maintenance-service.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
    }
}

springBoot {
    mainClass = 'uk.gov.hmcts.reform.divorce.casemaintenanceservice.CaseMaintenanceServiceApplication'
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenCentral()
    maven { url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
}

checkstyle {
    ignoreFailures = true
    maxWarnings = 584
    toolVersion = '10.25.0'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntimeOnly.extendsFrom testRuntime
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

def versions = [
    bcpkixJdk15on: '1.70',
    ccdStoreClient: '4.9.1.1',
    commonsBeanUtils: '1.9.4',
    commonsIo: '2.15.0',
    commonsLang3: '3.13.0',
    gradlePitest: '1.15.0',
    guava: '33.4.8-jre',
    httpComponents: '4.5.14',
    idamClient: '3.0.4',
    jackson: '2.18.3',
    jsonAssert: '1.5.1',
    junit: '4.13.2',
    junit5: '5.10.1',
    lombok: '1.18.30',
    pact_version: '4.1.7',
    pitest: '1.15.3',
    reformPropertiesVolume: '0.1.0',
    reformLogging: '6.1.9',
    apacheLogging: '2.24.3',
    restAssured: '4.5.1',
    serenity: '2.6.0',
    serenityCucumber: '1.9.51',
    serviceTokenGenerator: '5.3.2',
    sonarPitest: '0.5',
    springCloudDependencies: '2.2.6.RELEASE',
    springDoc : '1.7.0',
    springSecurityCrypto: '5.8.8',
    springSecurityRsa: '1.1.1',
    tomcat: '9.0.104',
    unirest: '1.4.9',
    wiremockVersion: '2.27.2'
]

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    useJUnit()
    failFast = true
}

dependencies {

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-validation')

    implementation("org.projectlombok:lombok:${versions.lombok}")

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.apacheLogging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: versions.apacheLogging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.apacheLogging

    testImplementation("org.projectlombok:lombok:${versions.lombok}")
    testImplementation('com.github.hmcts:fortify-client:1.4.9:all')
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation(group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils)
    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '4.0.5'
    implementation group: 'org.springframework', name: 'spring-context-support'
    implementation (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }

    implementation group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.18'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version : versions.commonsLang3

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents

    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging

    implementation group: 'com.github.hmcts', name: 'idam-java-client', version: versions.idamClient
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator

    implementation (group: 'com.github.hmcts', name: 'core-case-data-store-client', version: versions.ccdStoreClient)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }

    implementation(group: 'com.google.guava', name: 'guava', version: versions.guava)
    implementation (group: 'org.bouncycastle', name:'bcpkix-jdk15on', version: versions.bcpkixJdk15on)
    implementation (group: 'org.springframework.security', name:'spring-security-rsa', version: versions.springSecurityRsa)
    implementation (group: 'org.springframework.security', name:'spring-security-crypto', version: versions.springSecurityCrypto)

    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest

    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloudDependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    //integration test
    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestImplementation group: 'junit', name: 'junit', version: versions.junit
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured-all', version: versions.restAssured
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestImplementation group: 'org.skyscreamer', name:'jsonassert', version: versions.jsonAssert
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestImplementation (group: 'com.github.hmcts', name: 'core-case-data-store-client', version: versions.ccdStoreClient)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }
    integrationTestImplementation (group: 'com.github.hmcts', name:'service-auth-provider-java-client', version: versions.serviceTokenGenerator)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }

    integrationTestImplementation group: 'org.springframework', name: 'spring-context-support'
    integrationTestImplementation (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }
    integrationTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'

    contractTestImplementation group: 'org.springframework', name: 'spring-context-support'
    contractTestImplementation (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }
    contractTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudBomVersion}"
    }
    dependencies {
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils

        // CVE-2020-9484
        dependencySet(group: 'org.apache.tomcat.embed', version: versions.tomcat) {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-websocket'
            entry 'tomcat-embed-el'
        }

        //CVE-2022-25857
        dependencySet(group: 'org.yaml', version: '1.33') {
            entry 'snakeyaml'
        }

        // solves CVE-2014-3488, CVE-2015-2156, CVE-2019-16869
        dependencySet(group: 'io.netty', version: '4.1.100.Final') {
            entry 'netty-buffer'
            entry 'netty-codec'
            entry 'netty-codec-http'
            entry 'netty-common'
            entry 'netty-handler'
            entry 'netty-resolver'
            entry 'netty-transport'
        }

        //CVE-2022-22965
        dependencySet(group: 'org.springframework', version: '5.3.39') {
            entry 'spring-aop'
            entry 'spring-beans'
            entry 'spring-context'
            entry 'spring-context-support'
            entry 'spring-core'
            entry 'spring-expression'
            entry 'spring-jcl'
            entry 'spring-web'
            entry 'spring-webmvc'
        }

        dependencySet(
            group: 'com.fasterxml.jackson.core',
            version: versions.jackson
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }
        dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'
    }
}

dependencies {
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestImplementation(sourceSets.test.output)

    contractTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestImplementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents

    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntimeOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit5
    contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit5
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit5
    contractTestRuntimeOnly "org.junit.platform:junit-platform-commons:1.10.1"


}

tasks.register('smoke', Test) {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.casemaintenanceservice.category.SmokeTest'
    }
}

tasks.register('bootRunAat', BootRun) {
    dependsOn 'classes'
    main = bootJar.mainClass
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
    }
}

tasks.register('functional', Test) {
    doFirst() {
        printf("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 10
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    useJUnit()

    finalizedBy aggregate
}

tasks.register('contract', Test) {
    group = 'Delivery pipeline'
    description = 'Runs the Consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/divorce/casemaintenanceservice/client/**"
    systemProperty 'pact.rootDir', "pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.casemaintenanceservice.controller.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.controller.support.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.draftstore.factory.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.event.ccd.submission.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.event.config',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.management.monitoring.health.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.service.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.util.*']
    excludedClasses = [ ]
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

def sonarExclusions = [
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/domain/**/*',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/**/model/**/*',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/**/config/**/*',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/CaseMaintenanceServiceApplication.java',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/client/DraftStoreClient.java'
]

sonarqube {
    properties {
        property "sonar.projectKey", "DivorceCaseMaintenanceService"
        property "sonar.projectName", "Divorce :: case-maintenance-service"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.get()}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

tasks.register('developAddRelaseSuffix') {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

project.ext {
    pacticipant = 'divorce_caseMaintenanceService'
    pacticipantVersion = getCheckedOutGitCommitHash()
}

tasks.register('runAndPublishConsumerPactTests', Test) {
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    }
    publish {
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pacticipantVersion
    }
}


tasks.register('fortifyScan', JavaExec) {
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
